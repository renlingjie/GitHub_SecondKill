<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seckill.dao.SeckillDao">
    <!--1.1、第一个接口方法对应的标签，由于是update，所以不需要resultMap，同时传入的数据类型不是
    实体类，只要是基本数据类型和String，我们都不需要再用parameterType指定-->
    <!--1.2、秒杀（下单）时间killTime一定是在秒杀开始时间start_time和结束时间end_time之间
    同时库存number必须要大于0-->
    <!--1.3、小于等于"<="会和xml中的其他语句语法起冲突，所以通过CDATA标识：<![CDATA[ <= ]]>-->
    <update id="reduceNumber">
        update seckill
        set number = number - 1
        where seckill_id = #{seckillId}
        and start_time <![CDATA[ <= ]]> #{killTime}
        and end_time >= #{killTime}
        and number > 0
    </update>

    <!--2.1、第二个接口方法对应的标签。传入参数是long，parameterType="long"同样可以不写-->
    <!--2.2、这里结果为Seckill实体，里面没有其他其他复合属性，必须用resultType，避免混淆-->
    <!--2.3、由于我们在Mybatis配置文件中开启了驼峰&别名，故Mybatis在进行例如start_time会在封装
    时将至变成startTime，从而与实体类属性名对应一致-->
    <select id="queryById" parameterType="long" resultType="Seckill">
        select seckill_id,name,number,start_time,end_time,create_time
        from seckill
        where seckill_id = #{seckillId}
    </select>

    <!--3.1、第三个接口方法对应的标签。指定从offset（相较于起点的偏移量）到limit这一段的数据进行查询-->
    <select id="queryAll" resultType="Seckill">
        select seckill_id,name,number,start_time,end_time,create_time
        from seckill
        order by create_time desc
        limit #{offset},#{limit}
    </select>

    <!--4.1、第四个接口方法对应的标签。由Mybatis通过select标签，通过call来调用存储过程-->
    <!--4.2、statementType是为存储过程专门开发的属性，对应的值是CALLABLE-->
    <!--4.3、然后使用类似于call execute_seckill(1003,13502178891,now(),@r_result);我们来传值并执行存储过程：
    注意里面的参数除了对应的值，还要包括数据类型、传入类型还是输出类型（in/out）-->
    <select id="killByProcedure" statementType="CALLABLE">
        call execute_seckill(
        #{seckillId,jdbcType=BIGINT,mode=IN},
        #{phone,jdbcType=BIGINT,mode=IN},
        #{killTime,jdbcType=TIMESTAMP,mode=IN},
        #{result,jdbcType=INTEGER,mode=OUT}
        )
    </select>
</mapper>